<?xml version="1.0" encoding="utf-8"?>

<!-- https://tableau.github.io/connector-plugin-sdk/docs/dialect -->
<dialect name='FullMongoDB92JDBC'
         class='mongodb_jdbc'
         version='18.1'>
  <function-map>
    <function group='aggregate' name='AVG' return-type='real'>
      <formula>AVG(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='AVG' return-type='real'>
      <formula>AVG(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>COUNT(%1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>COUNT(%1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>COUNT(%1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>COUNT(%1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>COUNT(%1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT %1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT %1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT %1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT %1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT %1)</formula>
      <unagg-formula>(case when %1 IS NULL THEN 0 ELSE 1 END)</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='MAX' return-type='bool'>
      <formula>MAX(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MAX' return-type='real'>
      <formula>MAX(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='MAX' return-type='int'>
      <formula>MAX(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='MAX' return-type='str'>
      <formula>MAX(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='MAX' return-type='datetime'>
      <formula>MAX(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='MIN' return-type='bool'>
      <formula>MIN(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MIN' return-type='real'>
      <formula>MIN(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='MIN' return-type='int'>
      <formula>MIN(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='MIN' return-type='str'>
      <formula>MIN(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='MIN' return-type='datetime'>
      <formula>MIN(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='SUM' return-type='real'>
      <formula>SUM(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='SUM' return-type='int'>
      <formula>SUM(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='STDEV' return-type='real'>
      <formula>STDDEV_SAMP(%1)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='STDEV' return-type='real'>
      <formula>STDDEV_SAMP(%1)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='STDEVP' return-type='real'>
      <formula>STDDEV_POP(%1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN NULL ELSE 0 END)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='STDEVP' return-type='real'>
      <formula>STDDEV_POP(%1)</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN NULL ELSE 0 END)</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='VAR' return-type='real'>
      <formula>(STDDEV_SAMP(%1) * STDDEV_SAMP(%1))</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='VARP' return-type='real'>
      <formula>(STDDEV_POP(%1) * STDDEV_POP(%1))</formula>
      <unagg-formula>(CASE WHEN %1 IS NULL THEN NULL ELSE 0.0 END)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='cast' name='DATETIME' return-type='datetime'>
      <formula>CAST(%1 AS TIMESTAMP)</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='DATETIME' return-type='datetime'>
      <formula>(%1)</formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='DATETIME' return-type='datetime'>
      <formula>CAST(%1 AS TIMESTAMP)</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='DATETIME' return-type='datetime'>
      <formula>CAST(%1 AS TIMESTAMP)</formula>
      <argument type='int' />
    </function>
    <function group='cast' name='DATETIME' return-type='datetime'>
      <formula>CAST(%1 AS TIMESTAMP)</formula>
      <argument type='bool' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>CAST(%1 AS DOUBLE)</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>CAST(%1 AS DOUBLE)</formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>(%1)</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>CAST(%1 AS DOUBLE)</formula>
      <argument type='int' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>CAST(%1 AS DOUBLE)</formula>
      <argument type='bool' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>CAST(%1 AS INT)</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>CAST(%1 AS INT)</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>(%1)</formula>
      <argument type='int' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>CAST(%1 AS INT)</formula>
      <argument type='bool' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>(%1)</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>CAST(%1 AS STRING)</formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>CAST(%1 AS STRING)</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>CAST(%1 AS STRING)</formula>
      <argument type='int' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>CAST(%1 AS STRING)</formula>
      <argument type='bool' />
    </function>
    <function group='date' name='DAY' return-type='int'>
      <formula>EXTRACT(DAY FROM %1)</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='MONTH' return-type='int'>
      <formula>EXTRACT(MONTH FROM %1)</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='NOW' return-type='datetime'>
      <formula>CURRENT_TIMESTAMP</formula>
    </function>
    <function group='date' name='YEAR' return-type='int'>
      <formula>EXTRACT(YEAR FROM %1)</formula>
      <argument type='datetime' />
    </function>
    <function group='logical' name='ISNULL' return-type='bool'>
      <formula>(%1 IS NULL)</formula>
      <argument type='bool' />
    </function>
    <function group='logical' name='ISNULL' return-type='bool'>
      <formula>(%1 IS NULL)</formula>
      <argument type='real' />
    </function>
    <function group='logical' name='ISNULL' return-type='bool'>
      <formula>(%1 IS NULL)</formula>
      <argument type='int' />
    </function>
    <function group='logical' name='ISNULL' return-type='bool'>
      <formula>(%1 IS NULL)</formula>
      <argument type='str' />
    </function>
    <function group='logical' name='ISNULL' return-type='bool'>
      <formula>(%1 IS NULL)</formula>
      <argument type='datetime' />
    </function>
    <function group='logical' name='IFNULL' return-type='bool'>
      <formula>COALESCE(%1, %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='logical' name='IFNULL' return-type='int'>
      <formula>COALESCE(%1, %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='logical' name='IFNULL' return-type='real'>
      <formula>COALESCE(%1, %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='logical' name='IFNULL' return-type='str'>
      <formula>COALESCE(%1, %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='logical' name='IFNULL' return-type='datetime'>
      <formula>COALESCE(%1, %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='logical' name='IIF' return-type='bool'>
      <formula>(CASE WHEN %1 THEN %2 ELSE %3 END)</formula>
      <argument type='bool' />
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='logical' name='IIF' return-type='int'>
      <formula>(CASE WHEN %1 THEN %2 ELSE %3 END)</formula>
      <argument type='bool' />
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='logical' name='IIF' return-type='real'>
      <formula>(CASE WHEN %1 THEN %2 ELSE %3 END)</formula>
      <argument type='bool' />
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='logical' name='IIF' return-type='str'>
      <formula>(CASE WHEN %1 THEN %2 ELSE %3 END)</formula>
      <argument type='bool' />
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='logical' name='IIF' return-type='datetime'>
      <formula>(CASE WHEN %1 THEN %2 ELSE %3 END)</formula>
      <argument type='bool' />
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='logical' name='IIF' return-type='bool'>
      <formula>(CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE %4 END)</formula>
      <argument type='bool' />
      <argument type='bool' />
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='logical' name='IIF' return-type='int'>
      <formula>(CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE %4 END)</formula>
      <argument type='bool' />
      <argument type='int' />
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='logical' name='IIF' return-type='real'>
      <formula>(CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE %4 END)</formula>
      <argument type='bool' />
      <argument type='real' />
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='logical' name='IIF' return-type='str'>
      <formula>(CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE %4 END)</formula>
      <argument type='bool' />
      <argument type='str' />
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='logical' name='IIF' return-type='datetime'>
      <formula>(CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE %4 END)</formula>
      <argument type='bool' />
      <argument type='datetime' />
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='numeric;logical' name='ZN' return-type='real'>
      <formula>COALESCE(%1, 0)</formula>
      <argument type='real' />
    </function>
    <function group='numeric;logical' name='ZN' return-type='int'>
      <formula>COALESCE(%1, 0)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='ABS' return-type='real'>
      <formula>ABS(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ABS' return-type='int'>
      <formula>ABS(%1)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='CEILING' return-type='real'>
      <formula>CEIL(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='CEILING' return-type='int'>
      <formula>CEIL(%1)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='COS' return-type='real'>
      <formula>COS(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='COS' return-type='real'>
      <formula>COS(%1)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='COT' return-type='real'>
      <formula>1/TAN(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='COT' return-type='real'>
      <formula>1/TAN(%1)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='DEGREES' return-type='real'>
      <formula>DEGREES(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='DEGREES' return-type='real'>
      <formula>DEGREES(%1)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='DIV' return-type='int'>
      <formula>(%1 / %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='DIV' return-type='real'>
      <formula>(%1 / %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='DIV' return-type='real'>
      <formula>(%1 / %2)</formula>
      <argument type='int' />
      <argument type='real' />
    </function>
    <function group='numeric' name='DIV' return-type='real'>
      <formula>(%1 / %2)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='numeric' name='EXP' return-type='real'>
      <formula>POW(2.718281828459046, %1)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='EXP' return-type='real'>
      <formula>POW(2.718281828459046, %1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='FLOOR' return-type='real'>
      <formula>FLOOR(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='FLOOR' return-type='int'>
      <formula>FLOOR(%1)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='LN' return-type='real'>
      <formula>LOG(%1, 2.718281828459046)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='LN' return-type='real'>
    <formula>LOG(%1, 2.718281828459046)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='LOG' return-type='real'>
      <formula>LOG(%1, 10)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='LOG' return-type='real'>
      <formula>LOG(%1, 10)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='LOG' return-type='real'>
      <formula>LOG(%1, %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='LOG' return-type='real'>
    <formula>LOG(%1, %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='LOG' return-type='real'>
      <formula>LOG(%1, %2)</formula>
      <argument type='int' />
      <argument type='real' />
    </function>
    <function group='numeric' name='LOG' return-type='real'>
      <formula>LOG(%1, %2)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='numeric' name='MOD' return-type='int'>
      <formula>MOD(%1,%2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='MOD' return-type='real'>
      <formula>MOD(%1,%2)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='numeric' name='MOD' return-type='real'>
      <formula>MOD(%1,%2)</formula>
      <argument type='int' />
      <argument type='real' />
    </function>
    <function group='numeric' name='MOD' return-type='real'>
      <formula>MOD(%1,%2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='PI' return-type='real'>
      <formula>3.141592653589793</formula>
    </function>
    <function group='numeric' name='POWER' return-type='int'>
      <formula>POW(%1,%2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='POWER' return-type='real'>
      <formula>POW(%1,%2)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='numeric' name='POWER' return-type='real'>
      <formula>POW(%1,%2)</formula>
      <argument type='int' />
      <argument type='real' />
    </function>
    <function group='numeric' name='POWER' return-type='real'>
      <formula>POW(%1, %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='RADIANS' return-type='real'>
      <formula>RADIANS(%1)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='RADIANS' return-type='real'>
      <formula>RADIANS(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ROUND' return-type='int'>
      <formula>ROUND(%1, 0)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='ROUND' return-type='real'>
      <formula>ROUND(%1, 0)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ROUND' return-type='int'>
      <formula>ROUND(%1, %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
   <function group='numeric' name='ROUND' return-type='real'>
      <formula>ROUND(%1, (%2)::INT)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='ROUND' return-type='real'>
      <formula>ROUND(%1, %2)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='numeric' name='ROUND' return-type='real'>
      <formula>ROUND(%1, (%2)::INT)</formula>
      <argument type='int' />
      <argument type='real' />
    </function>
    <function group='numeric' name='SIGN' return-type='int'>
      <formula>CASE WHEN %1 IS null THEN null WHEN %1 &gt; 0 THEN 1 WHEN %1 &lt; 0 THEN -1 ELSE 0 END</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='SIGN' return-type='int'>
      <formula>CASE WHEN %1 IS null THEN null WHEN %1 &gt; 0 THEN 1 WHEN %1 &lt; 0 THEN -1 ELSE 0 END</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='SIN' return-type='real'>
      <formula>SIN(%1)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='SIN' return-type='real'>
      <formula>SIN(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='SQUARE' return-type='real'>
      <formula>POW(%1, 2) </formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='SQUARE' return-type='int'>
      <formula>POW(%1, 2) </formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='SQRT' return-type='real'>
      <formula>SQRT(%1)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='SQRT' return-type='real'>
      <formula>SQRT(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='TAN' return-type='real'>
      <formula>TAN(%1)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='TAN' return-type='real'>
      <formula>TAN(%1)</formula>
      <argument type='real' />
    </function>
    <function group='operator' name='*' return-type='real'>
      <formula>(%1 * %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='*' return-type='int'>
      <formula>(%1 * %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='*' return-type='real'>
      <formula>(%1 * %2)</formula>
      <argument type='int' />
      <argument type='real' />
    </function>
    <function group='operator' name='*' return-type='real'>
      <formula>(%1 * %2)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='operator' name='+' return-type='int'>
      <formula>(+%1)</formula>
      <argument type='int' />
    </function>
    <function group='operator' name='+' return-type='real'>
      <formula>(+%1)</formula>
      <argument type='real' />
    </function>
    <function group='operator' name='+' return-type='real'>
      <formula>(%1 + %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='+' return-type='int'>
      <formula>(%1 + %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='+' return-type='real'>
      <formula>(%1 + %2)</formula>
      <argument type='int' />
      <argument type='real' />
    </function>
    <function group='operator' name='+' return-type='real'>
      <formula>(%1 + %2)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula>(-%1)</formula>
      <argument type='real' />
    </function>
    <function group='operator' name='-' return-type='int'>
      <formula>(-%1)</formula>
      <argument type='int' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula>(%1 - %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='-' return-type='int'>
      <formula>(%1 - %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula>(%1 - %2)</formula>
      <argument type='int' />
      <argument type='real' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula>(%1 - %2)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='operator' name='/' return-type='real'>
      <formula>(%1 / %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='/' return-type='int'>
      <formula>(%1 / %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='/' return-type='real'>
      <formula>(%1 / %2)</formula>
      <argument type='int' />
      <argument type='real' />
    </function>
    <function group='operator' name='/' return-type='real'>
      <formula>(%1 / %2)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; %2)</formula>
      <argument type='int' />
      <argument type='real' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; %2)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= %2)</formula>
      <argument type='int' />
      <argument type='real' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= %2)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = %2)</formula>
      <argument type='int' />
      <argument type='real' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = %2)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='operator' name='!' return-type='bool'>
      <formula>(NOT %1)</formula>
      <argument type='bool' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 != %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 != %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 != %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 != %2)</formula>
      <argument type='int' />
      <argument type='real' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 != %2)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 != %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 != %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; %2)</formula>
      <argument type='int' />
      <argument type='real' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; %2)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= %2)</formula>
      <argument type='int' />
      <argument type='real' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= %2)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='operator' name='||' return-type='bool'>
      <formula>(%1 OR %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='operator' name='^^' return-type='int'>
      <formula>POW(%1, %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='^^' return-type='int'>
      <formula>POW(%1, %2)</formula>
      <argument type='int' />
      <argument type='real' />
    </function>
    <function group='operator' name='^^' return-type='int'>
      <formula>POW(%1, %2)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='operator' name='^^' return-type='real'>
      <formula>POW(%1, %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='%' return-type='int'>
      <formula>MOD(%1, %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='%' return-type='real'>
      <formula>MOD(%1, %2)</formula>
      <argument type='int' />
      <argument type='real' />
    </function>
    <function group='operator' name='%' return-type='real'>
      <formula>MOD(%1, %2)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='operator' name='%' return-type='real'>
      <formula>MOD(%1, %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='string' name='LEN' return-type='int'>
      <formula>CHAR_LENGTH(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='LOWER' return-type='str'>
      <formula>LOWER(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='LTRIM' return-type='str'>
      <formula>TRIM(LEADING FROM %1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='RTRIM' return-type='str'>
      <formula>TRIM(TRAILING FROM %1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='TRIM' return-type='str'>
      <formula>TRIM(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='TRIM' return-type='str'>
      <formula>TRIM(%1 FROM %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='UPPER' return-type='str'>
      <formula>UPPER(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='CONTAINS' return-type='bool'>
     <formula>(POSITION(%2 IN %1) &gt;= 0)</formula>
     <argument type='str' />
     <argument type='str' />
    </function>
    <function group='string' name='FIND' return-type='int'>
     <formula>(POSITION(%2 IN %1) + 1)</formula>
     <argument type='str' />
     <argument type='str' />
    </function>
    <function group='string' name='FIND' return-type='int'>
     <formula>(CASE WHEN (%3 &lt;= 0) THEN (POSITION(%2 IN %1) + 1) WHEN (POSITION(%2 IN SUBSTRING(%1 FROM (%3 - 1) FOR CHAR_LENGTH(%1))) &gt;= 0) THEN (POSITION(%2 IN SUBSTRING(%1 FROM (%3 - 1) FOR CHAR_LENGTH(%1))) + %3) ELSE 0 END)</formula>
     <argument type='str' />
     <argument type='str' />
     <argument type='int' />
    </function>
    <function group='string' name='FIND' return-type='int'>
     <formula>(CASE WHEN (%3 &lt;= 0) THEN (POSITION(%2 IN %1) + 1) WHEN (POSITION(%2 IN SUBSTRING(%1 FROM ((%3)::INT - 1) FOR CHAR_LENGTH(%1))) &gt;= 0) THEN (POSITION(%2 IN SUBSTRING(%1 FROM ((%3)::INT - 1) FOR CHAR_LENGTH(%1))) + (%3)::INT) ELSE 0 END)</formula>
     <argument type='str' />
     <argument type='str' />
     <argument type='real' />
    </function>
    <function group='string' name='LEFT' return-type='str'>
     <formula>(CASE WHEN %2 &lt;= 0 THEN (CASE WHEN %1 IS NULL THEN NULL ELSE '' END) ELSE SUBSTRING(%1,0,%2) END)</formula>
     <argument type='str' />
     <argument type='int' />
    </function>
    <function group='string' name='LEFT' return-type='str'>
     <formula>(CASE WHEN %2 &lt;= 0 THEN (CASE WHEN %1 IS NULL THEN NULL ELSE '' END) ELSE SUBSTRING(%1,0,(%2)::INT) END)</formula>
     <argument type='str' />
     <argument type='real' />
    </function>
    <function group='string' name='MID' return-type='str'>
     <formula>(CASE WHEN %2 &lt;= 0 THEN %1 ELSE SUBSTRING(%1 FROM ((%2) - 1) FOR CHAR_LENGTH(%1)) END)</formula>
     <argument type='str' />
     <argument type='int' />
    </function>
    <function group='string' name='MID' return-type='str'>
     <formula>(CASE WHEN %2 &lt;= 0 THEN %1 ELSE SUBSTRING(%1 FROM ((%2)::INT - 1) FOR CHAR_LENGTH(%1)) END)</formula>
     <argument type='str' />
     <argument type='real' />
    </function>
    <function group='string' name='MID' return-type='str'>
     <formula>(CASE WHEN %3 &lt;= 0 THEN (CASE WHEN %1 IS NULL THEN NULL ELSE '' END) ELSE SUBSTRING(%1 FROM ((%2)::INT - 1) FOR %3::INT)  END)</formula>
     <argument type='str' />
     <argument type='int' />
     <argument type='int' />
    </function>
    <function group='string' name='MID' return-type='str'>
     <formula>(CASE WHEN %3 &lt;= 0 THEN (CASE WHEN %1 IS NULL THEN NULL ELSE '' END) ELSE SUBSTRING(%1 FROM ((%2)::INT - 1) FOR %3::INT)  END)</formula>
     <argument type='str' />
     <argument type='real' />
     <argument type='real' />
    </function>
    <function group='string' name='MID' return-type='str'>
     <formula>(CASE WHEN %3 &lt;= 0 THEN (CASE WHEN %1 IS NULL THEN NULL ELSE '' END) ELSE SUBSTRING(%1 FROM ((%2) - 1) FOR %3::INT)  END)</formula>
     <argument type='str' />
     <argument type='int' />
     <argument type='real' />
    </function>
    <function group='string' name='MID' return-type='str'>
     <formula>(CASE WHEN %3 &lt;= 0 THEN (CASE WHEN %1 IS NULL THEN NULL ELSE '' END) ELSE SUBSTRING(%1 FROM ((%2)::INT - 1) FOR %3)  END)</formula>
     <argument type='str' />
     <argument type='real' />
     <argument type='int' />
    </function>
    <function group='string' name='RIGHT' return-type='str'>
     <formula>(CASE WHEN %2 &lt;= 0 THEN (CASE WHEN %1 IS NULL THEN NULL ELSE '' END) WHEN %2 &gt;= CHAR_LENGTH(%1) THEN %1 ELSE SUBSTRING(%1 FROM (CHAR_LENGTH(%1) - %2) FOR %2) END)</formula>
     <argument type='str' />
     <argument type='int' />
    </function>
    <function group='string' name='RIGHT' return-type='str'>
     <formula>(CASE WHEN %2 &lt;= 0 THEN (CASE WHEN %1 IS NULL THEN NULL ELSE '' END) WHEN %2 &gt;= CHAR_LENGTH(%1) THEN %1 ELSE SUBSTRING(%1 FROM (CHAR_LENGTH(%1) - (%2)::INT) FOR (%2)::INT) END)</formula>
     <argument type='str' />
     <argument type='real' />
    </function>
    <function group='string' name='STARTSWITH' return-type='bool'>
     <formula>(POSITION(%2 IN (TRIM(LEADING FROM %1))) = 0)</formula>
     <argument type='str' />
     <argument type='str' />
    </function>
    <date-function name='DATEADD' return-type='datetime'>
      <formula>DATEADD(%1, %2, %3)</formula>
      <formula part='year'>DATEADD(YEAR, %2, %3)</formula>
      <formula part='month'>DATEADD(MONTH, %2, %3)</formula>
      <formula part='day'>DATEADD(DAY, %2, %3)</formula>
      <formula part='hour'>DATEADD(HOUR, %2, %3)</formula>
      <formula part='minute'>DATEADD(MINUTE, %2, %3)</formula>
      <formula part='second'>DATEADD(SECOND, %2, %3)</formula>
      <formula part='quarter'>DATEADD(QUARTER, %2, %3)</formula>
      <formula part='week'>DATEADD(WEEK, %2, %3)</formula>
      <argument type='localstr'/>
      <argument type='int'/>
      <argument type='datetime'/>
    </date-function>
    <date-function name='DATEDIFF' return-type='int'>
      <formula>DATEDIFF(%1, %2, %3)</formula>
      <formula part='year'>DATEDIFF(YEAR, %2, %3)</formula>
      <formula part='month'>DATEDIFF(MONTH, %2, %3)</formula>
      <formula part='day'>DATEDIFF(DAY, %2, %3)</formula>
      <formula part='hour'>DATEDIFF(HOUR, %2, %3)</formula>
      <formula part='minute'>DATEDIFF(MINUTE, %2, %3)</formula>
      <formula part='second'>DATEDIFF(SECOND, %2, %3)</formula>
      <formula part='quarter'>DATEDIFF(QUARTER, %2, %3)</formula>
      <formula part='week'>DATEDIFF(WEEK, %2, %3)</formula>
      <argument type='localstr'/>
      <argument type='datetime'/>
      <argument type='datetime'/>
    </date-function>
    <date-function name='DATEDIFF' return-type='int'>
      <formula>DATEDIFF(%1, %2, %3, %4)</formula>
      <formula part='year'>DATEDIFF(YEAR, %2, %3, %4)</formula>
      <formula part='month'>DATEDIFF(MONTH, %2, %3, %4)</formula>
      <formula part='day'>DATEDIFF(DAY, %2, %3, %4)</formula>
      <formula part='hour'>DATEDIFF(HOUR, %2, %3, %4)</formula>
      <formula part='minute'>DATEDIFF(MINUTE, %2, %3, %4)</formula>
      <formula part='second'>DATEDIFF(SECOND, %2, %3, %4)</formula>
      <formula part='quarter'>DATEDIFF(QUARTER, %2, %3, %4)</formula>
      <formula part='week'>DATEDIFF(WEEK, %2, %3, %4)</formula>
      <argument type='localstr'/>
      <argument type='datetime'/>
      <argument type='datetime'/>
      <argument type='localstr'/>
    </date-function>
    <date-function name='DATEPART' return-type='int'>
      <formula>EXTRACT(%1 FROM %2)</formula>
      <formula part='year'>EXTRACT(YEAR FROM %2)</formula>
      <formula part='month'>EXTRACT(MONTH FROM %2)</formula>
      <formula part='day'>EXTRACT(DAY FROM %2)</formula>
      <formula part='hour'>EXTRACT(HOUR FROM %2)</formula>
      <formula part='minute'>EXTRACT(MINUTE FROM %2)</formula>
      <formula part='second'>EXTRACT(SECOND FROM %2)</formula>
      <formula part='week'>EXTRACT(WEEK FROM %2)</formula>
      <formula part='dayofyear'>EXTRACT(DAY_OF_YEAR FROM %2)</formula>
      <formula part='iso-week'>EXTRACT(ISO_WEEK FROM %2)</formula>
      <formula part='iso-weekday'>EXTRACT(ISO_WEEKDAY FROM %2)</formula>
      <argument type='localstr'/>
      <argument type='datetime'/>
    </date-function>
    <date-function name='DATETRUNC' return-type='datetime'>
      <formula>DATETRUNC(%1, %2)</formula>
      <formula part='year'>DATETRUNC(YEAR, %2)</formula>
      <formula part='month'>DATETRUNC(MONTH, %2)</formula>
      <formula part='day'>DATETRUNC(DAY, %2)</formula>
      <formula part='hour'>DATETRUNC(HOUR, %2)</formula>
      <formula part='minute'>DATETRUNC(MINUTE, %2)</formula>
      <formula part='second'>DATETRUNC(SECOND, %2)</formula>
      <formula part='quarter'>DATETRUNC(QUARTER, %2)</formula>
      <formula part='week'>DATETRUNC(WEEK, %2)</formula>
      <argument type='localstr'/>
      <argument type='datetime'/>
    </date-function>
    <date-function name='DATETRUNC' return-type='datetime'>
      <formula>DATETRUNC(%1, %2, %3)</formula>
      <formula part='year'>DATETRUNC(YEAR, %2, %3)</formula>
      <formula part='month'>DATETRUNC(MONTH, %2, %3)</formula>
      <formula part='day'>DATETRUNC(DAY, %2, %3)</formula>
      <formula part='hour'>DATETRUNC(HOUR, %2, %3)</formula>
      <formula part='minute'>DATETRUNC(MINUTE, %2, %3)</formula>
      <formula part='second'>DATETRUNC(SECOND, %2, %3)</formula>
      <formula part='quarter'>DATETRUNC(QUARTER, %2, %3)</formula>
      <formula part='week'>DATETRUNC(WEEK, %2, %3)</formula>
      <argument type='localstr'/>
      <argument type='datetime'/>
      <argument type='localstr'/>
    </date-function>
    <native-split-function>
      <formula part='left'>CASE WHEN %3 = 0 THEN NULL ELSE SPLIT(%1,%2, (%3 - 1)) END</formula>
      <formula part='right'>CASE WHEN %3 = 0 THEN NULL ELSE SPLIT(%1,%2, %3) END</formula>
    </native-split-function>
  </function-map>
  <supported-aggregations>
    <aggregation value='AGG_COUNT'/>
    <aggregation value='AGG_COUNTD'/>
    <aggregation value='AGG_SUM'/>
    <aggregation value='AGG_AVG'/>
    <aggregation value='AGG_MIN'/>
    <aggregation value='AGG_MAX'/>
    <aggregation value='AGG_STDEV'/>
    <aggregation value='AGG_STDEVP'/>
    <aggregation value='AGG_YEAR'/>
    <aggregation value='AGG_MONTH'/>
    <aggregation value='AGG_DAY'/>
    <aggregation value='AGG_HOUR'/>
    <aggregation value='AGG_MINUTE'/>
    <aggregation value='AGG_SECOND'/>
  </supported-aggregations>
  <sql-format>
    <format-datetime-literal formula="CAST(%1 AS TIMESTAMP)" format='yyyy-MM-dd HH:mm:ss.SSS' />
    <format-false literal='FALSE' predicate='FALSE' />
    <format-is-distinct value='Formula' />
    <format-order-by value='DirectionOnly' />
    <format-select>
      <part name='Select' value='SELECT %1' />
      <part name='From' value='FROM %1' />
      <part name='Where' value='WHERE %1' />
      <part name='Group' value='GROUP BY %1' />
      <part name='Having' value='HAVING %1' />
      <part name='OrderBy' value='ORDER BY %1' />
      <part name='Top' value='LIMIT %1' />
    </format-select>
    <format-string-literal value='Standard' />
    <format-true literal='TRUE' predicate='TRUE' />
    <supported-joins>
      <part name='Inner' />
      <part name='Left' />
      <part name='Right' />
      <part name='Cross' />
    </supported-joins>
  </sql-format>
</dialect>
